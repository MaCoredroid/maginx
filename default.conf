worker_processes  2;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    lua_package_path "/usr/local/openresty/http-lib/?.lua;;";
    lua_shared_dict dogs 1m;
    init_by_lua_block {
        local dogs = ngx.shared.dogs;
        dogs:set("head", "url-0")
        dogs:set("url-0", 0)
    }
    server {
        listen 8081;
        resolver 10.42.0.4;
        location / {
            if ($request_method = GET ) {
                set $target "";
                set $url "";
                rewrite_by_lua_block {
                    hostnum = string.sub(ngx.var.request_uri, 25)
                    hostnum = string.reverse(hostnum)
                    if hostnum ~= '' then 
                        num = tonumber(hostnum) 
                        if ( num ~= nil and num >= 0 and num == math.floor(num) and num ~= math.huge and num ~= nan ) then
                            result = "url-"
                            result = result .. tostring(num)
                            ngx.var.target = result .. ".default.svc.cluster.local:9090"
                        else
                            ngx.status = ngx.HTTP_NOT_FOUND
                            ngx.exit(ngx.status)
                        end
                    end
                }
                proxy_pass http://$target;
            }
            if ($request_method = POST ) {
                set $target1 "";
                set $append "";
                rewrite_by_lua_block {
                    local dogs = ngx.shared.dogs
                    hhh =  tostring(dogs:get("head"))
                    ngx.var.target1 = hhh .. ".default.svc.cluster.local:9090"
                    oldvalue=tonumber(dogs:get(hhh))+1
                    if(hhh == "url-0" and oldvalue == 1) then
                        local http = require "resty.http"
                        local httpc = http.new()
                        r, code =httpc:request_uri("http://10.42.2.210:9090/scaleUp?index=0", {
                            method = "GET",
                            keepalive_timeout = 60,
                            keepalive_pool = 10
                        })
                    end
                    dogs:set(tostring(hhh), oldvalue)
                    num = tonumber(string.sub(hhh,5))
                    if ( oldvalue >= 5000 ) then
                        num = num + 1
                        local http = require "resty.http"
                        local httpc = http.new()
                        r, code = httpc:request_uri("http://10.42.2.210:9090/scaleUp?index=" .. tostring(num), {
                            method = "GET",
                            keepalive_timeout = 60,
                            keepalive_pool = 10
                        })
                        dogs:set("head", "url-" .. tostring(num))
                        dogs:set("url-" .. tostring(num), 0)
                    end
                    ngx.var.append = string.reverse(tostring(num))
                }
                
            }
            proxy_set_header append $append;
            proxy_pass http://$target1;
        }
    }
}
